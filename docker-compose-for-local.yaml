version: "2.4"

services:
  bpp-protocol-webserver:
    build:
      context: seller-app-protocol/webserver
      dockerfile: dockerfile
    container_name: bpp-protocol-webserver
    depends_on:
      - rabbitmq
      - postgres
    environment:
      ENV: dev
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      IGM_CLIENT_ENDPOINT: ${IGM_CLIENT_ENDPOINT}
      BPP_PRIVATE_KEY: ${BPP_PRIVATE_KEY}
      BPP_PUBLIC_KEY: ${BPP_PUBLIC_KEY}
      BPP_UNIQUE_KEY_ID: ${BPP_UNIQUE_KEY_ID}
      BPP_ID: ${BPP_ID}
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      FLASK_SERVER: "True"
      DOCKER_DEFAULT_PLATFORM: ${DOCKER_DEFAULT_PLATFORM}
    expose:
      - 5555
    ports:
      - 5555:5555

  bpp-protocol-consumer:
    build:
      context: seller-app-protocol/webserver
      dockerfile: consumer_dockerfile
    container_name: bpp-protocol-consumer
    depends_on:
      - rabbitmq
      - postgres
    environment:
      ENV: dev
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      DOCKER_DEFAULT_PLATFORM: ${DOCKER_DEFAULT_PLATFORM}
      BPP_PRIVATE_KEY: ${BPP_PRIVATE_KEY}
      BPP_PUBLIC_KEY: ${BPP_PUBLIC_KEY}
      BPP_UNIQUE_KEY_ID: ${BPP_UNIQUE_KEY_ID}
      BPP_ID: ${BPP_ID}
      BPP_CLIENT_ENDPOINT: ${BPP_CLIENT_ENDPOINT}
      IGM_CLIENT_ENDPOINT: ${IGM_CLIENT_ENDPOINT}
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      BG_DEFAULT_URL: ${BG_DEFAULT_URL}
      FLASK_SERVER: "False"

  rabbitmq:
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - "./data:/data/db"

  seller:
    build:
      context: seller-app
      dockerfile: sellerDocker
    restart: "always"
    environment:
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_AUTH_USERNAME: ${SMTP_AUTH_USERNAME}
      SMTP_AUTH_PASSWORD: ${SMTP_AUTH_PASSWORD}
      SMTP_EMAIL_SENDER: ${SMTP_EMAIL_SENDER}
      SMTP_EXCEPTION_EMAIL_RECIPIENTS: ${SMTP_EXCEPTION_EMAIL_RECIPIENTS}
      SMTP_EMAIL_TEMPLATE_HEADER_IMAGE_PATH: ""
      MONGODB_DATABASE_HOST: mongodb://mongo
      MONGODB_DATABASE_PORT: 27017
      MONGODB_DATABASE_USERNAME: "root"
      MONGODB_DATABASE_PASSWORD: "root"
      MONGODB_DATABASE_NAME: "ondc-seller"
      AUTH_ACCESS_JWT_SECRET: "wftd3hg5$g67h*fd5h6fbvcy6rtg5wftd3hg5$g67h*fd5xxx"
      BASE_APP_NAMESPACE: "Seller"
      BASE_APP_PORT: 3019
      S3_VERSION: "v4"
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      INTRA_SERVICE_NOTIFICAION_SERVICE_URL: http://notification:3020
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      INTRA_SERVICE_SELLER_CLIENT_SERVICE_URL: http://seller-client:3001
      MMI_CLIENT_SECRET: ${MMI_CLIENT_SECRET}
      MMI_CLIENT_ID: ${MMI_CLIENT_ID}
      MMI_ADVANCE_API_KEY: ${MMI_ADVANCE_API_KEY}
    volumes:
      - ./app:/srv/app
      - ./seller-app/seller:/usr/src/app
      - "/usr/src/app/node_modules"
    ports:
      - "3019:3019"
    depends_on:
      - mongo
    expose:
      - 3019

  notification:
    build:
      context: seller-app
      dockerfile: notificationDocker
    restart: "always"
    environment:
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_AUTH_USERNAME: ${SMTP_AUTH_USERNAME}
      SMTP_AUTH_PASSWORD: ${SMTP_AUTH_PASSWORD}
      SMTP_EMAIL_SENDER: ${SMTP_EMAIL_SENDER}
      SMTP_EXCEPTION_EMAIL_RECIPIENTS: ${SMTP_EXCEPTION_EMAIL_RECIPIENTS}
      SMTP_EMAIL_TEMPLATE_HEADER_IMAGE_PATH: ""
      BASE_APP_NAMESPACE: "notification"
      BASE_APP_PORT: 3020
      AUTH_ACCESS_JWT_SECRET: ${AUTH_ACCESS_JWT_SECRET}
      INTRA_SERVICE_NOTIFICAION_SERVICE_URL: http://notification:3020
      INTRA_SERVICE_SELLER_CLIENT_SERVICE_URL: http://seller-client:3001
      APP_URL: ${APP_URL}
    volumes:
      - ./app:/srv/app
    ports:
      - "3020:3020"
    depends_on:
      - mongo
    expose:
      - 3020

  seller-client:
    build:
      context: seller-app
      dockerfile: sellerApiDocker
    restart: "always"
    environment:
      FIREBASE_SERVICE_ACCOUNT_JSON_PATH: lib/config/firebase-service-account.json
      SELLER_SERVER_URL: http://seller:3019
      NODE_ENV: production
      STRAPI_API_TOKEN: ${STRAPI_API_TOKEN}
      BPP_PRIVATE_KEY: ${BPP_PRIVATE_KEY}
      BPP_PUBLIC_KEY: ${BPP_PUBLIC_KEY}
      BPP_UNIQUE_KEY_ID: ${BPP_UNIQUE_KEY_ID}
      BPP_ID: ${BPP_ID}
      BPP_URI: ${BPP_URI}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME_SELLER_CLIENT: ${CLIENT_PG_DATABASE}
      DATABASE_USERNAME: ${CLIENT_PG_USER}
      DATABASE_PASSWORD: ${CLIENT_PG_PASSWORD}
      LOGISTICS_DELIVERY_TYPE: ${LOGISTICS_DELIVERY_TYPE}
      LOGISTICS_BAP_ID: ${LOGISTICS_BAP_ID}
    volumes:
      - ./app:/srv/app
    ports:
      - "3001:3001"
    depends_on:
      - seller
      - postgres

  postgres:
    image: postgres
    environment:
      POSTGRES_DB: strapi
      POSTGRES_USER: ${STRAPI_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${STRAPI_DATABASE_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./postgres_init_scripts/:/docker-entrypoint-initdb.d/
      - ./data/postgres:/var/lib/postgresql/data

  nginx:
    build:
      context: seller-app-frontend
      dockerfile: DockerfileWithoutSSL
      args:
        REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
        REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY}
        REACT_APP_FIREBASE_AUTH_DOMAIN: ${REACT_APP_FIREBASE_AUTH_DOMAIN}
        REACT_APP_SELLER_BACKEND_URL: ${REACT_APP_SELLER_BACKEND_URL}
    restart: "always"
    environment:
      REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
      REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY}
      REACT_APP_FIREBASE_AUTH_DOMAIN: ${REACT_APP_FIREBASE_AUTH_DOMAIN}
      REACT_APP_BUYER_BACKEND_URL: ${REACT_APP_BUYER_BACKEND_URL}
      REACT_APP_SELLER_BACKEND_URL: ${REACT_APP_SELLER_BACKEND_URL}
    volumes:
      - "./seller-app-frontend:/app"
      - "/app/node_modules"
      - "./seller-app-frontend/nginx-without-ssl.conf:/etc/nginx/conf.d/default.conf"
    depends_on:
      - seller
      - bpp-protocol-webserver
      - seller-client
    ports:
      - "80:80"
      - "443:443"

  seller-app-igm:
    build:
      context: seller-app-igm
    environment:
      PROTOCOL_BASE_URL: ${PROTOCOL_BASE_URL}
      DB_CONNECTION_STRING: ${DB_CONNECTION_STRING}
      BUGZILLA_SERVICE_URI: ${BUGZILLA_SERVICE_URI}
      DOMAIN: ${DOMAIN}
      BUGZILLA_API_KEY: ${BUGZILLA_API_KEY}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_HOST: ${PG_HOST}
      BPP_ID: ${BPP_ID}
      BPP_URI: ${BPP_URI}
      SELLER_SERVER_URL: http://seller:3019
    ports:
      - "8000:8000"
    restart: always

  bugzilla-node-backend:
    container_name: bugzilla-node-dev-seller
    build:
      context: seller-bugzilla-service
      dockerfile: Dockerfile
    environment:
      ENV: prod
      BUGZILLA_API_KEY: ${BUGZILLA_API_KEY}
      BUGZILLA_BASE_URI: ${BUGZILLA_BASE_URI}
      BUGZILLA_ADMIN_EMAIL: ${BUGZILLA_ADMIN_EMAIL}
    ports:
      - "8001:8001"
    restart: always

  bugzilla-dev-service:
    build:
      context: ./seller-bugzilla-service/bugzilla-main
      dockerfile: Dockerfile
    environment:
      BUGZILLA_WWW: /var/www/html/bugzilla/
      BUGZILLA_ADMIN_EMAIL: ${BUGZILLA_ADMIN_EMAIL}
    container_name: bugzilla-dev-service-seller
    image: shameerkc/bugzilla-dev-sqlite
    ports:
      - "90:80"
      - "5989:5900"
